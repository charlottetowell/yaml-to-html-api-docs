swagger: '2.0'
info:
  title: Charlotte's Chocolate Factory API
  description: API for managing chocolate products, Orders, and factory operations
  version: '1.0.0'
  contact:
    email: support@charlotteschocolatefactory.com

host: api.charlotteschocolatefactory.com
basePath: /v1
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

tags:
  - name: Chocolates
    description: Operations about chocolate products
  - name: Orders
    description: Order management operations
  - name: Users
    description: Customer operations

paths:
  /chocolates:
    get:
      tags:
        - Chocolates
      summary: List all chocolate products
      description: Returns a paginated list of chocolate products
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          type: integer
          default: 1
        - name: limit
          in: query
          description: Number of items per page
          type: integer
          default: 10
        - name: category
          in: query
          description: Filter by chocolate category
          type: string
          enum: [dark, milk, white, truffle, special]
      responses:
        '200':
          description: Successful operation
          schema:
            type: object
            properties:
              Chocolates:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "Dark Truffle Delight"
                    category:
                      type: string
                      example: "truffle"
                    price:
                      type: number
                      format: float
                      example: 12.99
                    description:
                      type: string
                      example: "Luxurious dark chocolate truffle with hint of raspberry"
                    inStock:
                      type: boolean
                      example: true
              total:
                type: integer
                example: 100
        '400':
          description: Invalid parameters
    
    options:
      tags:
        - Chocolates
      summary: Get chocolate endpoint options
      description: Returns the allowed HTTP methods and other CORS headers
      responses:
        '200':
          description: Successful operation
          headers:
            Allow:
              type: string
              description: Allowed HTTP methods
              default: "GET, POST, OPTIONS"
            Access-Control-Allow-Methods:
              type: string
              description: CORS allowed methods
              default: "GET, POST, OPTIONS"
            Access-Control-Allow-Headers:
              type: string
              description: Allowed headers
              default: "Content-Type, Authorization"
    
    post:
      tags:
        - Chocolates
      summary: Create a new chocolate product
      description: Add a new chocolate product to the catalog
      security:
        - Bearer: []
      parameters:
        - name: product
          in: body
          required: true
          schema:
            type: object
            required:
              - name
              - category
              - price
            properties:
              name:
                type: string
                example: "Caramel Sea Salt Bar"
              category:
                type: string
                enum: [dark, milk, white, truffle, special]
              price:
                type: number
                format: float
                example: 8.99
              description:
                type: string
                example: "Smooth milk chocolate with caramel and sea salt"
              ingredients:
                type: array
                items:
                  type: string
                example: ["cocoa butter", "milk solids", "caramel", "sea salt"]
      responses:
        '201':
          description: Chocolate product created successfully
        '400':
          description: Invalid input
        '401':
          description: Unauthorized
    
  /chocolates/{chocolateId}:
    get:
      tags:
        - Chocolates
      summary: Get chocolate by ID
      description: Returns details of a specific chocolate product
      parameters:
        - name: chocolateId
          in: path
          required: true
          type: integer
          description: ID of the chocolate product
      responses:
        '200':
          description: Successful operation
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 1
              name:
                type: string
                example: "Dark Truffle Delight"
              category:
                type: string
                example: "truffle"
              price:
                type: number
                format: float
                example: 12.99
              description:
                type: string
              ingredients:
                type: array
                items:
                  type: string
              nutritionInfo:
                type: object
                properties:
                  calories:
                    type: integer
                  sugar:
                    type: integer
                  cocoa:
                    type: integer
        '404':
          description: Chocolate not found

    put:
      tags:
        - Chocolates
      summary: Update chocolate product
      security:
        - Bearer: []
      parameters:
        - name: chocolateId
          in: path
          required: true
          type: integer
        - name: product
          in: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
              price:
                type: number
              description:
                type: string
              inStock:
                type: boolean
      responses:
        '200':
          description: Product updated successfully
        '404':
          description: Product not found
        '401':
          description: Unauthorized

    patch:
      tags:
        - Chocolates
      summary: Partially update chocolate product
      security:
        - Bearer: []
      parameters:
        - name: chocolateId
          in: path
          required: true
          type: integer
        - name: updates
          in: body
          required: true
          schema:
            type: object
            properties:
              price:
                type: number
              inStock:
                type: boolean
      responses:
        '200':
          description: Product partially updated
        '404':
          description: Product not found
        '401':
          description: Unauthorized

    delete:
      tags:
        - Chocolates
      summary: Delete chocolate product
      security:
        - Bearer: []
      parameters:
        - name: chocolateId
          in: path
          required: true
          type: integer
      responses:
        '204':
          description: Product deleted successfully
        '404':
          description: Product not found
        '401':
          description: Unauthorized

  /orders:
    post:
      tags:
        - Orders
      summary: Create a new order
      security:
        - Bearer: []
      parameters:
        - name: order
          in: body
          required: true
          schema:
            type: object
            required:
              - items
              - shippingAddress
            properties:
              items:
                type: array
                items:
                  type: object
                  properties:
                    chocolateId:
                      type: integer
                    quantity:
                      type: integer
              shippingAddress:
                type: object
                properties:
                  street:
                    type: string
                  city:
                    type: string
                  country:
                    type: string
                  postalCode:
                    type: string
      responses:
        '201':
          description: Order created successfully
          schema:
            type: object
            properties:
              orderId:
                type: string
              status:
                type: string
              total:
                type: number
        '400':
          description: Invalid input
        '401':
          description: Unauthorized

  /orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get order details
      security:
        - Bearer: []
      parameters:
        - name: orderId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: Successful operation
          schema:
            type: object
            properties:
              orderId:
                type: string
              status:
                type: string
                enum: [pending, processing, shipped, delivered]
              items:
                type: array
                items:
                  type: object
                  properties:
                    chocolateId:
                      type: integer
                    name:
                      type: string
                    quantity:
                      type: integer
                    price:
                      type: number
              total:
                type: number
              shippingAddress:
                type: object
                properties:
                  street:
                    type: string
                  city:
                    type: string
                  country:
                    type: string
                  postalCode:
                    type: string
        '404':
          description: Order not found
        '401':
          description: Unauthorized

  /users/{userId}/orders:
    get:
      tags:
        - Orders
        - Users
      summary: Get user's order history
      security:
        - Bearer: []
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
        - name: status
          in: query
          type: string
          enum: [pending, processing, shipped, delivered]
        - name: page
          in: query
          type: integer
          default: 1
        - name: limit
          in: query
          type: integer
          default: 10
      responses:
        '200':
          description: Successful operation
          schema:
            type: object
            properties:
              Orders:
                type: array
                items:
                  type: object
                  properties:
                    orderId:
                      type: string
                    date:
                      type: string
                      format: date-time
                    status:
                      type: string
                    total:
                      type: number
              total:
                type: integer
        '401':
          description: Unauthorized
        '404':
          description: User not found

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: 'JWT token in the format: Bearer {token}'
